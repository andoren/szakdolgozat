-- MySQL Script generated by MySQL Workbench
-- Wed Mar 18 15:33:41 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema iktato
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `iktato` ;

-- -----------------------------------------------------
-- Schema iktato
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `iktato` DEFAULT CHARACTER SET utf8 ;
USE `iktato` ;

-- -----------------------------------------------------
-- Table `iktato`.`Privilege`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`Privilege` ;

CREATE TABLE IF NOT EXISTS `iktato`.`Privilege` (
  `id` TINYINT NOT NULL AUTO_INCREMENT,
  `privilege` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `privilege_UNIQUE` ON `iktato`.`Privilege` (`privilege` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`user` ;

CREATE TABLE IF NOT EXISTS `iktato`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(250) NOT NULL,
  `fullname` VARCHAR(120) NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deleted_at` TIMESTAMP NULL,
  `deleted_by` INT NULL,
  `privilege` TINYINT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_users_privileges_id`
    FOREIGN KEY (`privilege`)
    REFERENCES `iktato`.`Privilege` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `username_UNIQUE` ON `iktato`.`user` (`username` ASC) VISIBLE;

CREATE INDEX `FK_users_privileges_id_idx` ON `iktato`.`user` (`privilege` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`doc`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`doc` ;

CREATE TABLE IF NOT EXISTS `iktato`.`doc` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(250) NOT NULL,
  `ext` VARCHAR(10) NOT NULL,
  `path` TEXT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iktato`.`telephely`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`telephely` ;

CREATE TABLE IF NOT EXISTS `iktato`.`telephely` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_telephely_created`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_telephely_deleted`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_telephely_created_idx` ON `iktato`.`telephely` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_telephely_deleted_idx` ON `iktato`.`telephely` (`deleted_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `name_UNIQUE` ON `iktato`.`telephely` (`name` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`ugyintezo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`ugyintezo` ;

CREATE TABLE IF NOT EXISTS `iktato`.`ugyintezo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  `telephely` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_admins_telephely_id`
    FOREIGN KEY (`telephely`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_admins_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_csoport_del_user_id`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `name_UNIQUE` ON `iktato`.`ugyintezo` (`name` ASC, `telephely` ASC) VISIBLE;

CREATE INDEX `fk_admins_premise_id_idx` ON `iktato`.`ugyintezo` (`telephely` ASC) VISIBLE;

CREATE INDEX `fk_admins_user_id_idx` ON `iktato`.`ugyintezo` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_csoport_del_user_id_idx` ON `iktato`.`ugyintezo` (`deleted_by` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`csoport`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`csoport` ;

CREATE TABLE IF NOT EXISTS `iktato`.`csoport` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `telephely` INT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp,
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  `shortname` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_group_telephely_id`
    FOREIGN KEY (`telephely`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_group_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_group_del_user_id`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_group_premise_id_idx` ON `iktato`.`csoport` (`telephely` ASC) VISIBLE;

CREATE INDEX `fk_group_user_id_idx` ON `iktato`.`csoport` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_group_del_user_id_idx` ON `iktato`.`csoport` (`deleted_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `telephely_UNIQUE` ON `iktato`.`csoport` (`telephely` ASC, `name` ASC) INVISIBLE;

CREATE UNIQUE INDEX `fk_group_telephelyShortname_UNIQUE` ON `iktato`.`csoport` (`telephely` ASC, `shortname` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`jelleg`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`jelleg` ;

CREATE TABLE IF NOT EXISTS `iktato`.`jelleg` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp,
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  `telephely` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_type_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_telephely_id`
    FOREIGN KEY (`telephely`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_type_del_user_id`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_type_user_id_idx` ON `iktato`.`jelleg` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_type_del_user_id_idx` ON `iktato`.`jelleg` (`deleted_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `fk_jelleg_unqiueBytelephely` ON `iktato`.`jelleg` (`name` ASC, `telephely` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`evek`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`evek` ;

CREATE TABLE IF NOT EXISTS `iktato`.`evek` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `year` SMALLINT NOT NULL,
  `active` TINYINT NOT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `deactivated_by` INT NULL,
  `deactivated_at` TIMESTAMP NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_evek_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_evek_deactivated_user_id`
    FOREIGN KEY (`deactivated_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_evek_user_id_idx` ON `iktato`.`evek` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_evek_deactivated_user_id_idx` ON `iktato`.`evek` (`deactivated_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `year_UNIQUE` ON `iktato`.`evek` (`year` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`partner`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`partner` ;

CREATE TABLE IF NOT EXISTS `iktato`.`partner` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(250) NOT NULL,
  `telephely` INT NOT NULL,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_partner_telephey_id`
    FOREIGN KEY (`telephely`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_partner_users_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_partner_deleted_users_id`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_partner_telephey_id_idx` ON `iktato`.`partner` (`telephely` ASC) VISIBLE;

CREATE INDEX `FK_partner_users_id_idx` ON `iktato`.`partner` (`created_by` ASC) VISIBLE;

CREATE INDEX `FK_partner_deleted_users_id_idx` ON `iktato`.`partner` (`deleted_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `FK_partner_uniqueBytelephely` ON `iktato`.`partner` (`name` ASC, `telephely` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`partnerugyintezo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`partnerugyintezo` ;

CREATE TABLE IF NOT EXISTS `iktato`.`partnerugyintezo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `partnerid` INT NOT NULL,
  `deleted` TINYINT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_pugyintezo_partnerid`
    FOREIGN KEY (`partnerid`)
    REFERENCES `iktato`.`partner` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_pugyintezo_createdid`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_pugyintezo_deletedid`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_pugyintezo_partnerid_idx` ON `iktato`.`partnerugyintezo` (`partnerid` ASC) VISIBLE;

CREATE INDEX `FK_pugyintezo_createdid_idx` ON `iktato`.`partnerugyintezo` (`created_by` ASC) VISIBLE;

CREATE INDEX `FK_pugyintezo_deletedid_idx` ON `iktato`.`partnerugyintezo` (`deleted_by` ASC) VISIBLE;

CREATE UNIQUE INDEX `partnerid_UNIQUE` ON `iktato`.`partnerugyintezo` (`partnerid` ASC, `name` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`ikonyv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`ikonyv` ;

CREATE TABLE IF NOT EXISTS `iktato`.`ikonyv` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `targy` VARCHAR(100) NOT NULL,
  `hivszam` VARCHAR(50) NOT NULL,
  `ugyintezo` INT NOT NULL,
  `partner` INT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `created_by` INT NOT NULL,
  `deleted` TINYINT NULL DEFAULT 0,
  `deleted_at` TIMESTAMP NULL,
  `deleted_by` INT NULL,
  `telephely` INT NOT NULL,
  `csoport` INT NOT NULL,
  `jelleg` INT NOT NULL,
  `irany` TINYINT NOT NULL,
  `erkezett` DATETIME NOT NULL,
  `hatido` DATETIME NOT NULL,
  `valaszid` INT NULL,
  `iktatottid` INT NULL,
  `iktatoszam` VARCHAR(45) NOT NULL,
  `szoveg` TEXT NULL,
  `yearid` INT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_ikonyv_user_id`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_admins_id`
    FOREIGN KEY (`ugyintezo`)
    REFERENCES `iktato`.`ugyintezo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_telephely_id`
    FOREIGN KEY (`telephely`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_csoport_id`
    FOREIGN KEY (`csoport`)
    REFERENCES `iktato`.`csoport` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_jellege_id`
    FOREIGN KEY (`jelleg`)
    REFERENCES `iktato`.`jelleg` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_self`
    FOREIGN KEY (`valaszid`)
    REFERENCES `iktato`.`ikonyv` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ikonyv_year_id`
    FOREIGN KEY (`yearid`)
    REFERENCES `iktato`.`evek` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_del_user_id`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyv_partner`
    FOREIGN KEY (`partner`)
    REFERENCES `iktato`.`partnerugyintezo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_reg_user_id_idx` ON `iktato`.`ikonyv` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_reg_admins_id_idx` ON `iktato`.`ikonyv` (`ugyintezo` ASC) VISIBLE;

CREATE INDEX `fk_reg_premise_id_idx` ON `iktato`.`ikonyv` (`telephely` ASC) VISIBLE;

CREATE INDEX `fk_reg_group_id_idx` ON `iktato`.`ikonyv` (`csoport` ASC) VISIBLE;

CREATE INDEX `fk_reg_type_id_idx` ON `iktato`.`ikonyv` (`jelleg` ASC) VISIBLE;

CREATE INDEX `fk_ikonyv_self_idx` ON `iktato`.`ikonyv` (`valaszid` ASC) VISIBLE;

CREATE INDEX `fk_ikonyv_year_id_idx` ON `iktato`.`ikonyv` (`yearid` ASC) VISIBLE;

CREATE INDEX `fk_ikonyv_del_user_id_idx` ON `iktato`.`ikonyv` (`deleted_by` ASC) VISIBLE;

CREATE INDEX `fk_ikonyv_partner_idx` ON `iktato`.`ikonyv` (`partner` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`ikonyvdocs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`ikonyvdocs` ;

CREATE TABLE IF NOT EXISTS `iktato`.`ikonyvdocs` (
  `ikonyv_id` INT NOT NULL,
  `doc_id` INT NOT NULL,
  `deleted` TINYINT NOT NULL DEFAULT 0,
  `created_by` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT current_timestamp(),
  `deleted_by` INT NULL,
  `deleted_at` TIMESTAMP NULL,
  CONSTRAINT `FK_ikonyvdocs_pdf_id`
    FOREIGN KEY (`doc_id`)
    REFERENCES `iktato`.`doc` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ikonyvdocsf_reg_id`
    FOREIGN KEY (`ikonyv_id`)
    REFERENCES `iktato`.`ikonyv` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyvdocs_created`
    FOREIGN KEY (`created_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ikonyvdoc_deleted`
    FOREIGN KEY (`deleted_by`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_registrationpdf_pdf_id_idx` ON `iktato`.`ikonyvdocs` (`doc_id` ASC) VISIBLE;

CREATE INDEX `FK_registrationpdf_reg_id_idx` ON `iktato`.`ikonyvdocs` (`ikonyv_id` ASC) VISIBLE;

CREATE INDEX `fk_ikonyvdocs_created_idx` ON `iktato`.`ikonyvdocs` (`created_by` ASC) VISIBLE;

CREATE INDEX `fk_ikonyvdoc_deleted_idx` ON `iktato`.`ikonyvdocs` (`deleted_by` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `iktato`.`felh_telephely`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`felh_telephely` ;

CREATE TABLE IF NOT EXISTS `iktato`.`felh_telephely` (
  `user_id` INT NOT NULL,
  `telephely_id` INT NOT NULL,
  CONSTRAINT `fk_users_telephely_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `iktato`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_telephely_premise_id`
    FOREIGN KEY (`telephely_id`)
    REFERENCES `iktato`.`telephely` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_users_premises_user_id_idx` ON `iktato`.`felh_telephely` (`user_id` ASC) VISIBLE;

CREATE INDEX `fk_users_premises_premise_id_idx` ON `iktato`.`felh_telephely` (`telephely_id` ASC) VISIBLE;

USE `iktato` ;

-- -----------------------------------------------------
-- Placeholder table for view `iktato`.`currentYearIkonyv`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iktato`.`currentYearIkonyv` (`ikonyvid` INT, `iktatoszam` INT, `targy` INT, `irany` INT, `hivszam` INT, `erkezett` INT, `hatido` INT, `telephely` INT, `deleted` INT, `szoveg` INT, `partnerid` INT, `partnername` INT, `partnerugyintezoid` INT, `partnerugyintezoname` INT, `ugyintezoid` INT, `ugyintezoname` INT, `csoportid` INT, `csoportname` INT, `csoportshortname` INT, `jellegid` INT, `jellegname` INT);

-- -----------------------------------------------------
-- Placeholder table for view `iktato`.`createIktSzam`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iktato`.`createIktSzam` (`id` INT, `generatedIktSzam` INT);

-- -----------------------------------------------------
-- Placeholder table for view `iktato`.`createSubIktSzam`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iktato`.`createSubIktSzam` (`id` INT, `generatedIktSzam` INT);

-- -----------------------------------------------------
-- Placeholder table for view `iktato`.`prevYearIkonyv`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iktato`.`prevYearIkonyv` (`id` INT, `targy` INT, `hivszam` INT, `ugyintezo` INT, `partner` INT, `created_at` INT, `created_by` INT, `deleted` INT, `deleted_at` INT, `deleted_by` INT, `telephely` INT, `csoport` INT, `jelleg` INT, `irany` INT, `erkezett` INT, `hatido` INT, `valaszid` INT, `iktatottid` INT, `iktatoszam` INT, `szoveg` INT, `yearid` INT);

-- -----------------------------------------------------
-- procedure AddRootIKonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddRootIKonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddRootIKonyv`(targy_b varchar(100),hivszam_b varchar(50),ugyintezo_b int, partner_b int, created_by_b int, telephely_b int,csoport_b int,
jelleg_b int, irany_b tinyint,erkezett_b datetime,hatido_b datetime,szoveg_b text, out newid int) 
    DETERMINISTIC
BEGIN
-- Initalize data

DECLARE currentid int;
DECLARE iktszam varchar(45);
DECLARE iranya tinyint;
DECLARE currentYear smallint;
Declare nextIktatottId int;
SET currentYear := getActiveYear();
SET nextIktatottId = getNextIkonyvIktatottId(telephely_b,null);

-- Insert data into ikonyv table

insert into ikonyv(targy,hivszam,ugyintezo,partner,created_by,telephely,csoport,jelleg,irany,erkezett,hatido,iktatoszam,szoveg,yearid,iktatottid)value
(targy_b,hivszam_b,ugyintezo_b,partner_b,created_by_b,telephely_b,csoport_b,jelleg_b,irany_b,erkezett_b,hatido_b,"empty...yet",szoveg_b,currentYear,nextIktatottId);


SET currentid := getFreshIkonyvID();

select generatedIktSzam into iktszam from createIktSzam where id = currentid;
        
update ikonyv set iktatoszam=iktszam where id = currentid;

SET newid = currentid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getNextIkonyvIktatottId
-- -----------------------------------------------------

USE `iktato`;
DROP function IF EXISTS `iktato`.`getNextIkonyvIktatottId`;

DELIMITER $$
USE `iktato`$$
CREATE FUNCTION `getNextIkonyvIktatottId` (telephely_b int, valaszid_b int) returns INT(11)
DETERMINISTIC
BEGIN
declare nextiktatottid int;
if(valaszid_b is null) then select IFNULL(MAX(iktatottid),0)+1 into nextiktatottid from ikonyv where telephely = telephely_b and valaszid is null;
else 
select IFNULL(MAX(iktatottid),0)+1 into nextiktatottid from ikonyv where telephely = telephely_b and valaszid = valaszid_b; 
end if;
return nextiktatottid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getFreshIkonyvID
-- -----------------------------------------------------

USE `iktato`;
DROP function IF EXISTS `iktato`.`getFreshIkonyvID`;

DELIMITER $$
USE `iktato`$$
CREATE FUNCTION `getFreshIkonyvID` () returns int(11)
DETERMINISTIC
BEGIN
declare currentid int;
select id into currentid from ikonyv where id = (select max(id) from ikonyv);
return currentid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getActiveYear
-- -----------------------------------------------------

USE `iktato`;
DROP function IF EXISTS `iktato`.`getActiveYear`;

DELIMITER $$
USE `iktato`$$
CREATE FUNCTION `getActiveYear` () returns int(11)
DETERMINISTIC
BEGIN
declare evid int;
select id into evid from evek where active = 1;
return evid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddSubIKonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddSubIKonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddSubIKonyv`(targy_b varchar(100),hivszam_b varchar(50),ugyintezo_b int, partner_b int, created_by_b int, telephely_b int,csoport_b int,
jelleg_b int, irany_b tinyint,erkezett_b datetime,hatido_b datetime,szoveg_b text, parentID int, out newId int ) 
    DETERMINISTIC
BEGIN
DECLARE nextiktatottid int;
DECLARE currentid int;
DECLARE iktszam varchar(255);
DECLARE currentYear int;
DECLARE myIktSzam varchar(45);
SET currentYear := getActiveYear();
SET nextiktatottid := getNextIkonyvIktatottId(telephely_b,parentID);

insert into ikonyv(targy,hivszam,ugyintezo,partner,created_by,telephely,csoport,jelleg,irany,erkezett,hatido,iktatottid,iktatoszam,szoveg,yearid,valaszid)value
(targy_b,hivszam_b,ugyintezo_b,partner_b,created_by_b,telephely_b,csoport_b,jelleg_b,irany_b,erkezett_b,hatido_b,nextiktatottid,"empty...yet",szoveg_b,currentYear,parentID);


SET currentid := getFreshIkonyvID();

select generatedIktSzam into iktszam from createIktSzam where id = parentID;

-- B-SZ/R/3/2019 
SET myIktSZam := CONCAT(SUBSTRING_INDEX(iktszam,'/',3),"-",nextiktatottid,"/",currentYear);      
update ikonyv set iktatoszam=myIktSZam where id = currentid;

set newId =  currentid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddGroup
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddGroup`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddGroup` (in name_b varchar(100),in shortname_b varchar(3),in telephely_b int,in created_by_b int,out newid_b int)
BEGIN
	insert into csoport(name,telephely,created_by,shortname)value(name_b,telephely_b,created_by_b,shortname_b);
	SELECT LAST_INSERT_ID() into newid_b;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddKind
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddKind`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddKind` (in name_b varchar(100),in telephely_b int, in created_by_b int , out newid_b int)
BEGIN
	insert into jelleg(name,telephely,created_by)value(name_b,telephely_b,created_by_b);
	SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddTelephely
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddTelephely`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddTelephely` (in name_b varchar(100),in created_by_b int, out newid_b int)
BEGIN
	insert into telephely(name,created_by)value(name_b,created_by_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddUgyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddUgyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddUgyintezo` (in name_b varchar(100), in telephely_b int,in created_by_b int , out newid_b int)
BEGIN
	insert into ugyintezo(name,telephely,created_by)value(name_b,telephely_b,created_by_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddUser
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddUser`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddUser` (in username_b varchar(45),in password_b varchar(250), in fullname_b varchar(120), in privilege_b tinyint, out newid_b int)
BEGIN
	insert into user(username,password,fullname,privilege)value(username_b,password_b,fullname_b,privilege_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddDoc
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddDoc`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddDoc` (in name_b varchar(250),in ext_b varchar(10),in data_b mediumblob,in iktId int )
BEGIN
	Declare newDocId int;
	insert into doc(name,ext,data)value(name_b,ext_b,data_b);
    select MAX(id) into newDocId from doc;
    insert into ikonyvdocs(ikonyv_id,doc_id)value(iktId,newDocId);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelGroup
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelGroup`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelGroup` (in id_b int, in deleter_b int)
BEGIN
   update csoport set deleted = 1 ,deleted_by = deleter_b , deleted_at = current_timestamp() where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelKind
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelKind`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelKind` (in id_b int, in deleter_b int)
BEGIN
	update jelleg set deleted = 1 , deleted_by = deleter_b , deleted_at = current_timestamp() where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteDoc
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DeleteDoc`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DeleteDoc` (in ikonyv_id_b int, in doc_id_b int)
BEGIN
	 delete from doc where id = docid_b;
     delete from ikonyvdocs where ikonyv_id_b = ikonyv_id and doc_id = doc_id_b; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelIkonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelIkonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelIkonyv` (in id_b int, in deleter_b int)
BEGIN
	call setDeletedByValaszID(id_b,deleter_b);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelTelephely
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelTelephely`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelTelephely` (in id_b int , in deleter_b int)
BEGIN
update telephely set deleted = 1 , deleted_by = deleter_b , deleted_at = current_timestamp() where id = id_b;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelUgyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelUgyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelUgyintezo` (in id_b int, in deleter_b int)
BEGIN
	update ugyintezo set deleted = 1 , deleted_by = deleter_b ,deleted_at = current_timestamp() where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelUser
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`DelUser`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `DelUser` (in user_id_b int, in deleter_b int)
BEGIN
 update user set deleted = 1 , deleted_by = deleter_b , deleted_at = current_timestamp() where id = user_id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getIkonyvek
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getIkonyvek`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getIkonyvek` (in user_id_b int)
BEGIN
	select * from currentYearIkonyv where telephely in (select telephely_id from felh_telephely where user_id = user_id_b) and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getIkonyvById
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getIkonyvById`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getIkonyvById` (in id_b int)
BEGIN
	select * from currentYearIkonyv where id = id_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getJellegek
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getJellegek`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getJellegek` (in telephely_b int)
BEGIN
	select * from jelleg where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getTelephelyek
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getTelephelyek`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getTelephelyek` (in user_b int)
BEGIN
	select t.id as id, t.name as name from felh_telephely f inner join telephely t on (f.telephely_id = t.id)where f.user_id = user_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getGroup
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getGroup`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getGroup` (in telephely_b int)
BEGIN
	select * from csoport where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getIkonyvekByTelephely
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getIkonyvekByTelephely`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getIkonyvekByTelephely` (in telephely_b int)
BEGIN
	select * from currentYearIkonyv where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUgyintezok
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getUgyintezok`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getUgyintezok` (in telephely_b int)
BEGIN
	select * from ugyintezo where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getEvek
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getEvek`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getEvek` ()
BEGIN
	select * from evek;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUsers
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getUsers`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getUsers` ()
BEGIN
		select Distinct(u.id) as id,u.fullname as fullname, u.username as username from felh_telephely f inner join user u on 
    (f.user_id = u.id) where deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getShortIkonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getShortIkonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getShortIkonyv` (in telephely_b int)
BEGIN
 select ikonyvid, iktatoszam from currentYearIkonyv where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPrevYearIkonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getPrevYearIkonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getPrevYearIkonyv` (in year_b int)
BEGIN
	select * from prevYearIkonyv where year = year_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyGroup
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyGroup`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyGroup` (in id_b int,in name_b varchar(100))
BEGIN
	update csoport set name = name_b where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyKind
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyKind`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyKind` (in id_b int,in name_b varchar(100),in shortname_b varchar(3))
BEGIN
	update jelleg set name = name_b, shortname = shortname_b where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyUgyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyUgyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyUgyintezo` (in id_b int,in name_b varchar(100))
BEGIN
	update ugyintezo set name = name_b where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyTelephely
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyTelephely`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyTelephely` (in id_b int, in name_b varchar(100))
BEGIN
	update telephely set name = name_b where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyIkonyv
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyIkonyv`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyIkonyv` (in id_b int, in targy_b varchar(100),in hivszam_b varchar(50),in ugyintezo_b int, in partner_b int, 
in erkezett_b datetime,in hatido_b datetime, in szoveg_b text)
BEGIN
	update ikonyv set targy = targy_b, hivszam = hivszam_b,ugyintezo = ugyintezo_b, partner = partner_b,erkezett = erkezett_b,hatido = hatido_b,szoveg = szoveg_b where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyUserPassword
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyUserPassword`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyUserPassword` (in user_id_b int, in password_b varchar(250))
BEGIN
	update user set password = password_b where id = user_id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addUserToTelephely
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`addUserToTelephely`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `addUserToTelephely` (in user_id_b int, in telephely_b int)
BEGIN
	insert into felh_telephely(user_id,telephely_id)value(user_id_b,telephely_b);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addPartner
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`addPartner`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `addPartner` (in created_by_b int, in telephely_b int, in name_b varchar(250), out newid_b int)
BEGIN
	insert into partner(created_by,telephely,name)value(created_by_b,telephely_b,name_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddPartnerUgyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`AddPartnerUgyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `AddPartnerUgyintezo` (in name_b varchar(250),in created_by_b int,in partner_b int, out newid_b int)
BEGIN
	insert into partnerugyintezo(name,partnerid,created_by)value(name_b,partner_b,created_by_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setDeletedByValaszID
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`setDeletedByValaszID`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE  `setDeletedByValaszID` (in ikonyv_b int, in user_id int)
BEGIN
	declare hasChild int;
    declare currentChild int;
    select count(*) into hasChild from ikonyv where valaszid = ikonyv_b;
    if (hasChild = 0) then 
    update ikonyv set deleted = 1, deleted_by = user_id, deleted_at = current_timestamp() where id = ikonyv_b;
    else
    while hasChild > 0 DO
		select id into currentChild from ikonyv where valaszid = ikonyv_b and deleted != 1 LIMIT 1;
        update ikonyv set deleted = 1, deleted_by = user_id, deleted_at = current_timestamp() where valaszid = currentChild;
		call setDeletedByValaszID(currentChild,user_id);
		SET hasChild = hasChild - 1;
    END WHILE;
    update ikonyv set deleted = 1, deleted_by = user_id, deleted_at = current_timestamp() where id = ikonyv_b;
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getpartners
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getpartners`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getpartners` (in telephely_b int)
BEGIN
	select * from partner where telephely = telephely_b and deleted = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getpartnerugyintezok
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getpartnerugyintezok`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getpartnerugyintezok` (in partner_b int)
BEGIN
 select id, name  from partnerugyintezo where partnerid = partner_b and deleted = 0;
 end;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getprivileges
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`getprivileges`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `getprivileges` ()
BEGIN
select * from privilege;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addyear
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`addyear`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `addyear` (in year_b int, in created_by_b int, out newid_b int)
BEGIN
	insert into evek(year,created_by)value(year_b,created_by_b);
    SELECT LAST_INSERT_ID() into newid_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ActivateYear
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ActivateYear`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ActivateYear` (in yearid int ,in user_id_b int)
BEGIN
	update evek set active=0,deactivated_by = user_id_b, deactivated_at = current_timestamp() where active = 1;
    update evek set active = 1 where id = yearid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delpartner
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`delpartner`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `delpartner` (in id_b int, in deleter_b int)
BEGIN
update partner set deleted = 1, deleted_by = deleter_b, deleted_at = current_timestamp() where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delpartnerugyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`delpartnerugyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `delpartnerugyintezo` (in id_b int, in deleter_b int)
BEGIN
update partnerugyintezo set deleted = 1, deleted_by = deleter_b, deleted_at = current_timestamp() where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UserLogin
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`UserLogin`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `UserLogin`(in username_b varchar(100), in password_b varchar(250))
BEGIN
	select u.id as id, u.username as username, u.fullname as fullname, p.id as privilegeid, p.name as privilegename from user u 
    inner join privilege  p on (u.privilege = p.id) where username = username_b and password = password_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyPartner
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyPartner`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyPartner` (in id_b int,in name_b varchar(100))
BEGIN
	update partner set name = name_b  where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ModifyPartnerUgyintezo
-- -----------------------------------------------------

USE `iktato`;
DROP procedure IF EXISTS `iktato`.`ModifyPartnerUgyintezo`;

DELIMITER $$
USE `iktato`$$
CREATE PROCEDURE `ModifyPartnerUgyintezo` (in id_b int,in name_b varchar(100))
BEGIN
	update partnerugyintezo set name = name_b  where id = id_b;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `iktato`.`currentYearIkonyv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`currentYearIkonyv`;
DROP VIEW IF EXISTS `iktato`.`currentYearIkonyv` ;
USE `iktato`;
CREATE  OR REPLACE VIEW `currentYearIkonyv` AS select i.id as ikonyvid,i.iktatoszam as iktatoszam, i.targy as targy, i.irany as irany,i.hivszam as hivszam, i.erkezett as erkezett, i.hatido as hatido, i.telephely as telephely, i.deleted as deleted
,i.szoveg as szoveg, p.id as partnerid, p.name as partnername, pu.id as partnerugyintezoid, pu.name as partnerugyintezoname,
 u.id as ugyintezoid, u.name as ugyintezoname,cs.id as csoportid, cs.name as csoportname, cs.shortname as csoportshortname,j.id as jellegid, j.name as jellegname
 from ikonyv as i 
 join partnerugyintezo pu on (i.partner = pu.id) 
 join partner p on(pu.id = p.id)
 join csoport cs on (i.csoport = cs.id)
 join jelleg j on (i.jelleg = j.id) join ugyintezo u on(i.ugyintezo = u.id)
  where yearid = (select id from evek where active = 1);

-- -----------------------------------------------------
-- View `iktato`.`createIktSzam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`createIktSzam`;
DROP VIEW IF EXISTS `iktato`.`createIktSzam` ;
USE `iktato`;
CREATE  OR REPLACE VIEW `createIktSzam` AS select i.id,concat(if(irany=0,'B','K'),'-',ics.shortname,'/',substring(t.name,1,1),'/',i.iktatottid,
        IFNULL(concat('-',i.valaszid), ''),'/',evek.year) AS generatedIktSzam from ikonyv i inner join telephely t on(i.telephely = t.id) INNER JOIN 
        csoport ics on(ics.id = i.csoport) INNER JOIN jelleg j on(j.id = i.jelleg) INNER JOIN ugyintezo ugy
        on(ugy.id = i.ugyintezo) inner join evek on(i.yearid = evek.id );

-- -----------------------------------------------------
-- View `iktato`.`createSubIktSzam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`createSubIktSzam`;
DROP VIEW IF EXISTS `iktato`.`createSubIktSzam` ;
USE `iktato`;
CREATE  OR REPLACE VIEW `createSubIktSzam` AS select i.id, concat(if(irany=0,'B','K'),'-',ics.shortname,'/',substring(t.name,1,1),'/',i.iktatottid,
        IFNULL(concat('-',i.valaszid), ''),'/',evek.year) AS generatedIktSzam from ikonyv i inner join telephely t on(i.telephely = t.id) INNER JOIN 
        csoport ics on(ics.id = i.csoport) INNER JOIN jelleg j on(j.id = i.jelleg) INNER JOIN ugyintezo ugy
        on(ugy.id = i.ugyintezo) inner join evek on(i.yearid = evek.id );

-- -----------------------------------------------------
-- View `iktato`.`prevYearIkonyv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `iktato`.`prevYearIkonyv`;
DROP VIEW IF EXISTS `iktato`.`prevYearIkonyv` ;
USE `iktato`;
CREATE  OR REPLACE VIEW `prevYearIkonyv` AS select * from ikonyv where deleted = 0;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
