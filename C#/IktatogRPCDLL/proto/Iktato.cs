// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: iktato.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iktato {

  /// <summary>Holder for reflection information generated from iktato.proto</summary>
  public static partial class IktatoReflection {

    #region Descriptor
    /// <summary>File descriptor for iktato.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IktatoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxpa3RhdG8ucHJvdG8SBklrdGF0byJ2CgxOZXdUb3J6c0RhdGESIAoHUGFy",
            "dG5lchgBIAEoCzIPLklrdGF0by5QYXJ0bmVyEiQKCVRlbGVwaGVseRgCIAEo",
            "CzIRLklrdGF0by5UZWxlcGhlbHkSDAoETmFtZRgDIAEoCRIQCghTaG9ybmFt",
            "ZRgEIAEoCSItCgtSb3ZpZElrb255dhIKCgJJZBgBIAEoBRISCgpJa3RhdG9z",
            "emFtGAIgASgJIl8KCERvY3VtZW50EgoKAklkGAEgASgFEgsKA0RvYxgCIAEo",
            "DBIMCgROYW1lGAMgASgJEgwKBFR5cGUYBCABKAkSDAoEUGF0aBgFIAEoCRIQ",
            "CghJa29ueXZJZBgGIAEoBSJSCgxEb2N1bWVudEluZm8SCgoCSWQYASABKAUS",
            "DAoETmFtZRgCIAEoCRIMCgRUeXBlGAMgASgJEgwKBFNpemUYBCABKAESDAoE",
            "UGF0aBgFIAEoCSJZChBTZWFyY2hJa29ueXZEYXRhEg0KBUlyYW55GAEgASgF",
            "EhoKBFllYXIYAiABKAsyDC5Ja3RhdG8uWWVhchIaCgRVc2VyGAMgASgLMgwu",
            "SWt0YXRvLlVzZXIiMAoEWWVhchIKCgJpZBgBIAEoBRIMCgRZZWFyGAIgASgF",
            "Eg4KBkFjdGl2ZRgDIAEoCCL9AgoGSWtvbnl2EgoKAmlkGAEgASgFEg0KBXRh",
            "cmd5GAIgASgJEg8KB2hpdnN6YW0YAyABKAkSJAoJVWd5aW50ZXpvGAQgASgL",
            "MhEuSWt0YXRvLlVneWludGV6bxIgCgdQYXJ0bmVyGAUgASgLMg8uSWt0YXRv",
            "LlBhcnRuZXISIAoKY3JlYXRlZF9ieRgGIAEoCzIMLklrdGF0by5Vc2VyEiQK",
            "CVRlbGVwaGVseRgHIAEoCzIRLklrdGF0by5UZWxlcGhlbHkSIAoHQ3NvcG9y",
            "dBgIIAEoCzIPLklrdGF0by5Dc29wb3J0Eh4KBkplbGxlZxgJIAEoCzIOLklr",
            "dGF0by5KZWxsZWcSDQoFSXJhbnkYCiABKAUSEAoIRXJrZXpldHQYCyABKAkS",
            "DgoGSGF0SWRvGAwgASgJEhIKCklrdGF0b3N6YW0YDSABKAkSDgoGU3pvdmVn",
            "GA4gASgJEg4KBkhhc0RvYxgPIAEoCBIQCghWYWxhc3pJZBgQIAEoBSIlCglV",
            "Z3lpbnRlem8SCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCSJRCgdQYXJ0bmVy",
            "EgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSLAoKVWd5aW50ZXpvaxgDIAMo",
            "CzIYLklrdGF0by5QYXJ0bmVyVWd5aW50ZXpvIiwKEFBhcnRuZXJVZ3lpbnRl",
            "em8SCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCSIlCglUZWxlcGhlbHkSCgoC",
            "aWQYASABKAUSDAoEbmFtZRgCIAEoCSI2CgdDc29wb3J0EgoKAmlkGAEgASgF",
            "EgwKBG5hbWUYAiABKAkSEQoJc2hvcnRuYW1lGAMgASgJIiIKBkplbGxlZxIK",
            "CgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJIjIKDExvZ2luTWVzc2FnZRIQCgh1",
            "c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSIOCgxFbXB0eU1lc3Nh",
            "Z2UiJQoJUHJpdmlsZWdlEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkiKAoG",
            "QW5zd2VyEg0KBWVycm9yGAEgASgIEg8KB21lc3NhZ2UYAiABKAkivAEKBFVz",
            "ZXISCgoCaWQYASABKAUSEAoIdXNlcm5hbWUYAiABKAkSEAoIZnVsbG5hbWUY",
            "AyABKAkSEAoIcGFzc3dvcmQYBCABKAkSJAoJcHJpdmlsZWdlGAUgASgLMhEu",
            "SWt0YXRvLlByaXZpbGVnZRIkCglBdXRoVG9rZW4YBiABKAsyES5Ja3RhdG8u",
            "QXV0aFRva2VuEiYKC1RlbGVwaGVseWVrGAcgAygLMhEuSWt0YXRvLlRlbGVw",
            "aGVseSIaCglBdXRoVG9rZW4SDQoFdG9rZW4YASABKAkiGwoNRGVsZXRlTWVz",
            "c2FnZRIKCgJpZBgBIAEoBTKKFgoNSWt0YXRvU2VydmljZRIrCgVMb2dpbhIU",
            "LklrdGF0by5Mb2dpbk1lc3NhZ2UaDC5Ja3RhdG8uVXNlchIuCgZMb2dvdXQS",
            "FC5Ja3RhdG8uRW1wdHlNZXNzYWdlGg4uSWt0YXRvLkFuc3dlchIoCghSZWdp",
            "c3RlchIMLklrdGF0by5Vc2VyGg4uSWt0YXRvLkFuc3dlchIxCgpBZGRJa3Rh",
            "dGFzEg4uSWt0YXRvLklrb255dhoTLklrdGF0by5Sb3ZpZElrb255dhI7ChRB",
            "ZGRJa3RhdGFzV2l0aFZhbGFzehIOLklrdGF0by5Ja29ueXYaEy5Ja3RhdG8u",
            "Um92aWRJa29ueXYSLwoNTW9kaWZ5SWt0YXRhcxIOLklrdGF0by5Ja29ueXYa",
            "Di5Ja3RhdG8uQW5zd2VyEjgKDkxpc3RhbGxJa3RhdGFzEhQuSWt0YXRvLkVt",
            "cHR5TWVzc2FnZRoOLklrdGF0by5Ja29ueXYwARI5CgtMaXN0SWt0YXRhcxIY",
            "LklrdGF0by5TZWFyY2hJa29ueXZEYXRhGg4uSWt0YXRvLklrb255djABEjYK",
            "DURlbGV0ZUlrdGF0YXMSFS5Ja3RhdG8uRGVsZXRlTWVzc2FnZRoOLklrdGF0",
            "by5BbnN3ZXISMAoIR2V0WWVhcnMSFC5Ja3RhdG8uRW1wdHlNZXNzYWdlGgwu",
            "SWt0YXRvLlllYXIwARJLChxHZXRQYXJ0bmVyVWd5aW50ZXpvQnlQYXJ0bmVy",
            "Eg8uSWt0YXRvLlBhcnRuZXIaGC5Ja3RhdG8uUGFydG5lclVneWludGV6bzAB",
            "EjoKDUdldFByaXZpbGVnZXMSFC5Ja3RhdG8uRW1wdHlNZXNzYWdlGhEuSWt0",
            "YXRvLlByaXZpbGVnZTABEj0KFkdldEplbGxlZ2VrQnlUZWxlcGhlbHkSES5J",
            "a3RhdG8uVGVsZXBoZWx5Gg4uSWt0YXRvLkplbGxlZzABEj8KF0dldENzb3Bv",
            "cnRva0J5VGVsZXBoZWx5EhEuSWt0YXRvLlRlbGVwaGVseRoPLklrdGF0by5D",
            "c29wb3J0MAESPwoXR2V0UGFydG5lcmVrQnlUZWxlcGhlbHkSES5Ja3RhdG8u",
            "VGVsZXBoZWx5Gg8uSWt0YXRvLlBhcnRuZXIwARJIChxHZXRTaG9ydElrdFN6",
            "YW1va0J5VGVsZXBoZWx5EhEuSWt0YXRvLlRlbGVwaGVseRoTLklrdGF0by5S",
            "b3ZpZElrb255djABEkIKGEdldFVneWludGV6b2tCeVRlbGVwaGVseRIRLklr",
            "dGF0by5UZWxlcGhlbHkaES5Ja3RhdG8uVWd5aW50ZXpvMAESOwoOR2V0VGVs",
            "ZXBoZWx5ZWsSFC5Ja3RhdG8uRW1wdHlNZXNzYWdlGhEuSWt0YXRvLlRlbGVw",
            "aGVseTABEjIKCkdldEFsbFVzZXISFC5Ja3RhdG8uRW1wdHlNZXNzYWdlGgwu",
            "SWt0YXRvLlVzZXIwARI5CgtHZXRJa29ueXZlaxIYLklrdGF0by5TZWFyY2hJ",
            "a29ueXZEYXRhGg4uSWt0YXRvLklrb255djABEkEKF0dldERvY3VtZW50SW5m",
            "b0J5SWtvbnl2Eg4uSWt0YXRvLklrb255dhoULklrdGF0by5Eb2N1bWVudElu",
            "Zm8wARI0CgxBZGRUZWxlcGhlbHkSES5Ja3RhdG8uVGVsZXBoZWx5GhEuSWt0",
            "YXRvLlRlbGVwaGVseRI8ChRBZGRKZWxsZWdUb1RlbGVwaGVseRIULklrdGF0",
            "by5OZXdUb3J6c0RhdGEaDi5Ja3RhdG8uSmVsbGVnEk4KHEFkZFBhcnRuZXJV",
            "Z3lpbnRlem9Ub1BhcnRuZXISFC5Ja3RhdG8uTmV3VG9yenNEYXRhGhguSWt0",
            "YXRvLlBhcnRuZXJVZ3lpbnRlem8SPgoVQWRkUGFydG5lclRvVGVsZXBoZWx5",
            "EhQuSWt0YXRvLk5ld1RvcnpzRGF0YRoPLklrdGF0by5QYXJ0bmVyEiUKB0Fk",
            "ZFVzZXISDC5Ja3RhdG8uVXNlchoMLklrdGF0by5Vc2VyEj4KFUFkZENzb3Bv",
            "cnRUb1RlbGVwaGVseRIULklrdGF0by5OZXdUb3J6c0RhdGEaDy5Ja3RhdG8u",
            "Q3NvcG9ydBJCChdBZGRVZ3lpbnRlem9Ub1RlbGVwaGVseRIULklrdGF0by5O",
            "ZXdUb3J6c0RhdGEaES5Ja3RhdG8uVWd5aW50ZXpvEioKCk1vZGlmeVVzZXIS",
            "DC5Ja3RhdG8uVXNlchoOLklrdGF0by5BbnN3ZXISNAoPTW9kaWZ5VGVsZXBo",
            "ZWx5EhEuSWt0YXRvLlRlbGVwaGVseRoOLklrdGF0by5BbnN3ZXISQgoWTW9k",
            "aWZ5UGFydG5lclVneWludGV6bxIYLklrdGF0by5QYXJ0bmVyVWd5aW50ZXpv",
            "Gg4uSWt0YXRvLkFuc3dlchIwCg1Nb2RpZnlQYXJ0bmVyEg8uSWt0YXRvLlBh",
            "cnRuZXIaDi5Ja3RhdG8uQW5zd2VyEi4KDE1vZGlmeUplbGxlZxIOLklrdGF0",
            "by5KZWxsZWcaDi5Ja3RhdG8uQW5zd2VyEjAKDU1vZGlmeUNzb3BvcnQSDy5J",
            "a3RhdG8uQ3NvcG9ydBoOLklrdGF0by5BbnN3ZXISNAoPTW9kaWZ5VWd5aW50",
            "ZXpvEhEuSWt0YXRvLlVneWludGV6bxoOLklrdGF0by5BbnN3ZXISQgoWUmVt",
            "b3ZlUGFydG5lclVneWludGV6bxIYLklrdGF0by5QYXJ0bmVyVWd5aW50ZXpv",
            "Gg4uSWt0YXRvLkFuc3dlchIwCg1SZW1vdmVQYXJ0bmVyEg8uSWt0YXRvLlBh",
            "cnRuZXIaDi5Ja3RhdG8uQW5zd2VyEisKC0Rpc2FibGVVc2VyEgwuSWt0YXRv",
            "LlVzZXIaDi5Ja3RhdG8uQW5zd2VyEi4KDFJlbW92ZUlrb255dhIOLklrdGF0",
            "by5Ja29ueXYaDi5Ja3RhdG8uQW5zd2VyEi4KDFJlbW92ZUplbGxlZxIOLklr",
            "dGF0by5KZWxsZWcaDi5Ja3RhdG8uQW5zd2VyEjQKD1JlbW92ZVRlbGVwaGVs",
            "eRIRLklrdGF0by5UZWxlcGhlbHkaDi5Ja3RhdG8uQW5zd2VyEjAKDVJlbW92",
            "ZUNzb3BvcnQSDy5Ja3RhdG8uQ3NvcG9ydBoOLklrdGF0by5BbnN3ZXISQQoc",
            "UmVtb3ZlVWd5aW50ZXpvRnJvbVRlbGVwaGVseRIRLklrdGF0by5VZ3lpbnRl",
            "em8aDi5Ja3RhdG8uQW5zd2VyEjkKD0dldERvY3VtZW50QnlJZBIULklrdGF0",
            "by5Eb2N1bWVudEluZm8aEC5Ja3RhdG8uRG9jdW1lbnQSOAoOVXBsb2FkRG9j",
            "dW1lbnQSEC5Ja3RhdG8uRG9jdW1lbnQaFC5Ja3RhdG8uRG9jdW1lbnRJbmZv",
            "EjYKDlJlbW92ZWRvY3VtZW50EhQuSWt0YXRvLkRvY3VtZW50SW5mbxoOLklr",
            "dGF0by5BbnN3ZXISNwoSR2V0VXNlclRlbGVwaGVseWVpEgwuSWt0YXRvLlVz",
            "ZXIaES5Ja3RhdG8uVGVsZXBoZWx5MAESOgoSQWRkWWVhckFuZEFjdGl2YXRl",
            "EhQuSWt0YXRvLkVtcHR5TWVzc2FnZRoOLklrdGF0by5BbnN3ZXISPAoPR2V0",
            "QWxsVGVsZXBoZWx5EhQuSWt0YXRvLkVtcHR5TWVzc2FnZRoRLklrdGF0by5U",
            "ZWxlcGhlbHkwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.NewTorzsData), global::Iktato.NewTorzsData.Parser, new[]{ "Partner", "Telephely", "Name", "Shorname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.RovidIkonyv), global::Iktato.RovidIkonyv.Parser, new[]{ "Id", "Iktatoszam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Document), global::Iktato.Document.Parser, new[]{ "Id", "Doc", "Name", "Type", "Path", "IkonyvId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.DocumentInfo), global::Iktato.DocumentInfo.Parser, new[]{ "Id", "Name", "Type", "Size", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.SearchIkonyvData), global::Iktato.SearchIkonyvData.Parser, new[]{ "Irany", "Year", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Year), global::Iktato.Year.Parser, new[]{ "Id", "Year_", "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Ikonyv), global::Iktato.Ikonyv.Parser, new[]{ "Id", "Targy", "Hivszam", "Ugyintezo", "Partner", "CreatedBy", "Telephely", "Csoport", "Jelleg", "Irany", "Erkezett", "HatIdo", "Iktatoszam", "Szoveg", "HasDoc", "ValaszId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Ugyintezo), global::Iktato.Ugyintezo.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Partner), global::Iktato.Partner.Parser, new[]{ "Id", "Name", "Ugyintezok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.PartnerUgyintezo), global::Iktato.PartnerUgyintezo.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Telephely), global::Iktato.Telephely.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Csoport), global::Iktato.Csoport.Parser, new[]{ "Id", "Name", "Shortname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Jelleg), global::Iktato.Jelleg.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.LoginMessage), global::Iktato.LoginMessage.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.EmptyMessage), global::Iktato.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Privilege), global::Iktato.Privilege.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.Answer), global::Iktato.Answer.Parser, new[]{ "Error", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.User), global::Iktato.User.Parser, new[]{ "Id", "Username", "Fullname", "Password", "Privilege", "AuthToken", "Telephelyek" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.AuthToken), global::Iktato.AuthToken.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iktato.DeleteMessage), global::Iktato.DeleteMessage.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NewTorzsData : pb::IMessage<NewTorzsData> {
    private static readonly pb::MessageParser<NewTorzsData> _parser = new pb::MessageParser<NewTorzsData>(() => new NewTorzsData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewTorzsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTorzsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTorzsData(NewTorzsData other) : this() {
      partner_ = other.partner_ != null ? other.partner_.Clone() : null;
      telephely_ = other.telephely_ != null ? other.telephely_.Clone() : null;
      name_ = other.name_;
      shorname_ = other.shorname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTorzsData Clone() {
      return new NewTorzsData(this);
    }

    /// <summary>Field number for the "Partner" field.</summary>
    public const int PartnerFieldNumber = 1;
    private global::Iktato.Partner partner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Partner Partner {
      get { return partner_; }
      set {
        partner_ = value;
      }
    }

    /// <summary>Field number for the "Telephely" field.</summary>
    public const int TelephelyFieldNumber = 2;
    private global::Iktato.Telephely telephely_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Telephely Telephely {
      get { return telephely_; }
      set {
        telephely_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Shorname" field.</summary>
    public const int ShornameFieldNumber = 4;
    private string shorname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shorname {
      get { return shorname_; }
      set {
        shorname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewTorzsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewTorzsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Partner, other.Partner)) return false;
      if (!object.Equals(Telephely, other.Telephely)) return false;
      if (Name != other.Name) return false;
      if (Shorname != other.Shorname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partner_ != null) hash ^= Partner.GetHashCode();
      if (telephely_ != null) hash ^= Telephely.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Shorname.Length != 0) hash ^= Shorname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Partner);
      }
      if (telephely_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Telephely);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Shorname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Shorname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      if (telephely_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Telephely);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Shorname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shorname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewTorzsData other) {
      if (other == null) {
        return;
      }
      if (other.partner_ != null) {
        if (partner_ == null) {
          Partner = new global::Iktato.Partner();
        }
        Partner.MergeFrom(other.Partner);
      }
      if (other.telephely_ != null) {
        if (telephely_ == null) {
          Telephely = new global::Iktato.Telephely();
        }
        Telephely.MergeFrom(other.Telephely);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Shorname.Length != 0) {
        Shorname = other.Shorname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (partner_ == null) {
              Partner = new global::Iktato.Partner();
            }
            input.ReadMessage(Partner);
            break;
          }
          case 18: {
            if (telephely_ == null) {
              Telephely = new global::Iktato.Telephely();
            }
            input.ReadMessage(Telephely);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Shorname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RovidIkonyv : pb::IMessage<RovidIkonyv> {
    private static readonly pb::MessageParser<RovidIkonyv> _parser = new pb::MessageParser<RovidIkonyv>(() => new RovidIkonyv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RovidIkonyv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RovidIkonyv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RovidIkonyv(RovidIkonyv other) : this() {
      id_ = other.id_;
      iktatoszam_ = other.iktatoszam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RovidIkonyv Clone() {
      return new RovidIkonyv(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Iktatoszam" field.</summary>
    public const int IktatoszamFieldNumber = 2;
    private string iktatoszam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iktatoszam {
      get { return iktatoszam_; }
      set {
        iktatoszam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RovidIkonyv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RovidIkonyv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Iktatoszam != other.Iktatoszam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Iktatoszam.Length != 0) hash ^= Iktatoszam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Iktatoszam.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Iktatoszam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Iktatoszam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iktatoszam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RovidIkonyv other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Iktatoszam.Length != 0) {
        Iktatoszam = other.Iktatoszam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Iktatoszam = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Document : pb::IMessage<Document> {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      id_ = other.id_;
      doc_ = other.doc_;
      name_ = other.name_;
      type_ = other.type_;
      path_ = other.path_;
      ikonyvId_ = other.ikonyvId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Doc" field.</summary>
    public const int DocFieldNumber = 2;
    private pb::ByteString doc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Doc {
      get { return doc_; }
      set {
        doc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 5;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IkonyvId" field.</summary>
    public const int IkonyvIdFieldNumber = 6;
    private int ikonyvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IkonyvId {
      get { return ikonyvId_; }
      set {
        ikonyvId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Doc != other.Doc) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Path != other.Path) return false;
      if (IkonyvId != other.IkonyvId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Doc.Length != 0) hash ^= Doc.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (IkonyvId != 0) hash ^= IkonyvId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Doc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Doc);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (IkonyvId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IkonyvId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Doc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Doc);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (IkonyvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IkonyvId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Doc.Length != 0) {
        Doc = other.Doc;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.IkonyvId != 0) {
        IkonyvId = other.IkonyvId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Doc = input.ReadBytes();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 48: {
            IkonyvId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DocumentInfo : pb::IMessage<DocumentInfo> {
    private static readonly pb::MessageParser<DocumentInfo> _parser = new pb::MessageParser<DocumentInfo>(() => new DocumentInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentInfo(DocumentInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      size_ = other.size_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentInfo Clone() {
      return new DocumentInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 4;
    private double size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 5;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Size, other.Size)) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Size != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Size);
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Size != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Size);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Size != 0D) {
        size += 1 + 8;
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Size != 0D) {
        Size = other.Size;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 33: {
            Size = input.ReadDouble();
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchIkonyvData : pb::IMessage<SearchIkonyvData> {
    private static readonly pb::MessageParser<SearchIkonyvData> _parser = new pb::MessageParser<SearchIkonyvData>(() => new SearchIkonyvData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchIkonyvData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchIkonyvData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchIkonyvData(SearchIkonyvData other) : this() {
      irany_ = other.irany_;
      year_ = other.year_ != null ? other.year_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchIkonyvData Clone() {
      return new SearchIkonyvData(this);
    }

    /// <summary>Field number for the "Irany" field.</summary>
    public const int IranyFieldNumber = 1;
    private int irany_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Irany {
      get { return irany_; }
      set {
        irany_ = value;
      }
    }

    /// <summary>Field number for the "Year" field.</summary>
    public const int YearFieldNumber = 2;
    private global::Iktato.Year year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Year Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Iktato.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchIkonyvData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchIkonyvData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Irany != other.Irany) return false;
      if (!object.Equals(Year, other.Year)) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Irany != 0) hash ^= Irany.GetHashCode();
      if (year_ != null) hash ^= Year.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Irany != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Irany);
      }
      if (year_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Year);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Irany != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Irany);
      }
      if (year_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Year);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchIkonyvData other) {
      if (other == null) {
        return;
      }
      if (other.Irany != 0) {
        Irany = other.Irany;
      }
      if (other.year_ != null) {
        if (year_ == null) {
          Year = new global::Iktato.Year();
        }
        Year.MergeFrom(other.Year);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Iktato.User();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Irany = input.ReadInt32();
            break;
          }
          case 18: {
            if (year_ == null) {
              Year = new global::Iktato.Year();
            }
            input.ReadMessage(Year);
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::Iktato.User();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Year : pb::IMessage<Year> {
    private static readonly pb::MessageParser<Year> _parser = new pb::MessageParser<Year>(() => new Year());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Year> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Year() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Year(Year other) : this() {
      id_ = other.id_;
      year_ = other.year_;
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Year Clone() {
      return new Year(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Year" field.</summary>
    public const int Year_FieldNumber = 2;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year_ {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "Active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Year);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Year other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Year_ != other.Year_) return false;
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Year_ != 0) hash ^= Year_.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Year_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Year_);
      }
      if (Active != false) {
        output.WriteRawTag(24);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Year_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year_);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Year other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Year_ != 0) {
        Year_ = other.Year_;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Year_ = input.ReadInt32();
            break;
          }
          case 24: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ikonyv : pb::IMessage<Ikonyv> {
    private static readonly pb::MessageParser<Ikonyv> _parser = new pb::MessageParser<Ikonyv>(() => new Ikonyv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ikonyv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikonyv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikonyv(Ikonyv other) : this() {
      id_ = other.id_;
      targy_ = other.targy_;
      hivszam_ = other.hivszam_;
      ugyintezo_ = other.ugyintezo_ != null ? other.ugyintezo_.Clone() : null;
      partner_ = other.partner_ != null ? other.partner_.Clone() : null;
      createdBy_ = other.createdBy_ != null ? other.createdBy_.Clone() : null;
      telephely_ = other.telephely_ != null ? other.telephely_.Clone() : null;
      csoport_ = other.csoport_ != null ? other.csoport_.Clone() : null;
      jelleg_ = other.jelleg_ != null ? other.jelleg_.Clone() : null;
      irany_ = other.irany_;
      erkezett_ = other.erkezett_;
      hatIdo_ = other.hatIdo_;
      iktatoszam_ = other.iktatoszam_;
      szoveg_ = other.szoveg_;
      hasDoc_ = other.hasDoc_;
      valaszId_ = other.valaszId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikonyv Clone() {
      return new Ikonyv(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "targy" field.</summary>
    public const int TargyFieldNumber = 2;
    private string targy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Targy {
      get { return targy_; }
      set {
        targy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hivszam" field.</summary>
    public const int HivszamFieldNumber = 3;
    private string hivszam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hivszam {
      get { return hivszam_; }
      set {
        hivszam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ugyintezo" field.</summary>
    public const int UgyintezoFieldNumber = 4;
    private global::Iktato.Ugyintezo ugyintezo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Ugyintezo Ugyintezo {
      get { return ugyintezo_; }
      set {
        ugyintezo_ = value;
      }
    }

    /// <summary>Field number for the "Partner" field.</summary>
    public const int PartnerFieldNumber = 5;
    private global::Iktato.Partner partner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Partner Partner {
      get { return partner_; }
      set {
        partner_ = value;
      }
    }

    /// <summary>Field number for the "created_by" field.</summary>
    public const int CreatedByFieldNumber = 6;
    private global::Iktato.User createdBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.User CreatedBy {
      get { return createdBy_; }
      set {
        createdBy_ = value;
      }
    }

    /// <summary>Field number for the "Telephely" field.</summary>
    public const int TelephelyFieldNumber = 7;
    private global::Iktato.Telephely telephely_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Telephely Telephely {
      get { return telephely_; }
      set {
        telephely_ = value;
      }
    }

    /// <summary>Field number for the "Csoport" field.</summary>
    public const int CsoportFieldNumber = 8;
    private global::Iktato.Csoport csoport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Csoport Csoport {
      get { return csoport_; }
      set {
        csoport_ = value;
      }
    }

    /// <summary>Field number for the "Jelleg" field.</summary>
    public const int JellegFieldNumber = 9;
    private global::Iktato.Jelleg jelleg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Jelleg Jelleg {
      get { return jelleg_; }
      set {
        jelleg_ = value;
      }
    }

    /// <summary>Field number for the "Irany" field.</summary>
    public const int IranyFieldNumber = 10;
    private int irany_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Irany {
      get { return irany_; }
      set {
        irany_ = value;
      }
    }

    /// <summary>Field number for the "Erkezett" field.</summary>
    public const int ErkezettFieldNumber = 11;
    private string erkezett_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Erkezett {
      get { return erkezett_; }
      set {
        erkezett_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HatIdo" field.</summary>
    public const int HatIdoFieldNumber = 12;
    private string hatIdo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HatIdo {
      get { return hatIdo_; }
      set {
        hatIdo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Iktatoszam" field.</summary>
    public const int IktatoszamFieldNumber = 13;
    private string iktatoszam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iktatoszam {
      get { return iktatoszam_; }
      set {
        iktatoszam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Szoveg" field.</summary>
    public const int SzovegFieldNumber = 14;
    private string szoveg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Szoveg {
      get { return szoveg_; }
      set {
        szoveg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasDoc" field.</summary>
    public const int HasDocFieldNumber = 15;
    private bool hasDoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDoc {
      get { return hasDoc_; }
      set {
        hasDoc_ = value;
      }
    }

    /// <summary>Field number for the "ValaszId" field.</summary>
    public const int ValaszIdFieldNumber = 16;
    private int valaszId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValaszId {
      get { return valaszId_; }
      set {
        valaszId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ikonyv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ikonyv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Targy != other.Targy) return false;
      if (Hivszam != other.Hivszam) return false;
      if (!object.Equals(Ugyintezo, other.Ugyintezo)) return false;
      if (!object.Equals(Partner, other.Partner)) return false;
      if (!object.Equals(CreatedBy, other.CreatedBy)) return false;
      if (!object.Equals(Telephely, other.Telephely)) return false;
      if (!object.Equals(Csoport, other.Csoport)) return false;
      if (!object.Equals(Jelleg, other.Jelleg)) return false;
      if (Irany != other.Irany) return false;
      if (Erkezett != other.Erkezett) return false;
      if (HatIdo != other.HatIdo) return false;
      if (Iktatoszam != other.Iktatoszam) return false;
      if (Szoveg != other.Szoveg) return false;
      if (HasDoc != other.HasDoc) return false;
      if (ValaszId != other.ValaszId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Targy.Length != 0) hash ^= Targy.GetHashCode();
      if (Hivszam.Length != 0) hash ^= Hivszam.GetHashCode();
      if (ugyintezo_ != null) hash ^= Ugyintezo.GetHashCode();
      if (partner_ != null) hash ^= Partner.GetHashCode();
      if (createdBy_ != null) hash ^= CreatedBy.GetHashCode();
      if (telephely_ != null) hash ^= Telephely.GetHashCode();
      if (csoport_ != null) hash ^= Csoport.GetHashCode();
      if (jelleg_ != null) hash ^= Jelleg.GetHashCode();
      if (Irany != 0) hash ^= Irany.GetHashCode();
      if (Erkezett.Length != 0) hash ^= Erkezett.GetHashCode();
      if (HatIdo.Length != 0) hash ^= HatIdo.GetHashCode();
      if (Iktatoszam.Length != 0) hash ^= Iktatoszam.GetHashCode();
      if (Szoveg.Length != 0) hash ^= Szoveg.GetHashCode();
      if (HasDoc != false) hash ^= HasDoc.GetHashCode();
      if (ValaszId != 0) hash ^= ValaszId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Targy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Targy);
      }
      if (Hivszam.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Hivszam);
      }
      if (ugyintezo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ugyintezo);
      }
      if (partner_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Partner);
      }
      if (createdBy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedBy);
      }
      if (telephely_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Telephely);
      }
      if (csoport_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Csoport);
      }
      if (jelleg_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Jelleg);
      }
      if (Irany != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Irany);
      }
      if (Erkezett.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Erkezett);
      }
      if (HatIdo.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HatIdo);
      }
      if (Iktatoszam.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Iktatoszam);
      }
      if (Szoveg.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Szoveg);
      }
      if (HasDoc != false) {
        output.WriteRawTag(120);
        output.WriteBool(HasDoc);
      }
      if (ValaszId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ValaszId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Targy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Targy);
      }
      if (Hivszam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hivszam);
      }
      if (ugyintezo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ugyintezo);
      }
      if (partner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      if (createdBy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedBy);
      }
      if (telephely_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Telephely);
      }
      if (csoport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Csoport);
      }
      if (jelleg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jelleg);
      }
      if (Irany != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Irany);
      }
      if (Erkezett.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Erkezett);
      }
      if (HatIdo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HatIdo);
      }
      if (Iktatoszam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iktatoszam);
      }
      if (Szoveg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Szoveg);
      }
      if (HasDoc != false) {
        size += 1 + 1;
      }
      if (ValaszId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValaszId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ikonyv other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Targy.Length != 0) {
        Targy = other.Targy;
      }
      if (other.Hivszam.Length != 0) {
        Hivszam = other.Hivszam;
      }
      if (other.ugyintezo_ != null) {
        if (ugyintezo_ == null) {
          Ugyintezo = new global::Iktato.Ugyintezo();
        }
        Ugyintezo.MergeFrom(other.Ugyintezo);
      }
      if (other.partner_ != null) {
        if (partner_ == null) {
          Partner = new global::Iktato.Partner();
        }
        Partner.MergeFrom(other.Partner);
      }
      if (other.createdBy_ != null) {
        if (createdBy_ == null) {
          CreatedBy = new global::Iktato.User();
        }
        CreatedBy.MergeFrom(other.CreatedBy);
      }
      if (other.telephely_ != null) {
        if (telephely_ == null) {
          Telephely = new global::Iktato.Telephely();
        }
        Telephely.MergeFrom(other.Telephely);
      }
      if (other.csoport_ != null) {
        if (csoport_ == null) {
          Csoport = new global::Iktato.Csoport();
        }
        Csoport.MergeFrom(other.Csoport);
      }
      if (other.jelleg_ != null) {
        if (jelleg_ == null) {
          Jelleg = new global::Iktato.Jelleg();
        }
        Jelleg.MergeFrom(other.Jelleg);
      }
      if (other.Irany != 0) {
        Irany = other.Irany;
      }
      if (other.Erkezett.Length != 0) {
        Erkezett = other.Erkezett;
      }
      if (other.HatIdo.Length != 0) {
        HatIdo = other.HatIdo;
      }
      if (other.Iktatoszam.Length != 0) {
        Iktatoszam = other.Iktatoszam;
      }
      if (other.Szoveg.Length != 0) {
        Szoveg = other.Szoveg;
      }
      if (other.HasDoc != false) {
        HasDoc = other.HasDoc;
      }
      if (other.ValaszId != 0) {
        ValaszId = other.ValaszId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Targy = input.ReadString();
            break;
          }
          case 26: {
            Hivszam = input.ReadString();
            break;
          }
          case 34: {
            if (ugyintezo_ == null) {
              Ugyintezo = new global::Iktato.Ugyintezo();
            }
            input.ReadMessage(Ugyintezo);
            break;
          }
          case 42: {
            if (partner_ == null) {
              Partner = new global::Iktato.Partner();
            }
            input.ReadMessage(Partner);
            break;
          }
          case 50: {
            if (createdBy_ == null) {
              CreatedBy = new global::Iktato.User();
            }
            input.ReadMessage(CreatedBy);
            break;
          }
          case 58: {
            if (telephely_ == null) {
              Telephely = new global::Iktato.Telephely();
            }
            input.ReadMessage(Telephely);
            break;
          }
          case 66: {
            if (csoport_ == null) {
              Csoport = new global::Iktato.Csoport();
            }
            input.ReadMessage(Csoport);
            break;
          }
          case 74: {
            if (jelleg_ == null) {
              Jelleg = new global::Iktato.Jelleg();
            }
            input.ReadMessage(Jelleg);
            break;
          }
          case 80: {
            Irany = input.ReadInt32();
            break;
          }
          case 90: {
            Erkezett = input.ReadString();
            break;
          }
          case 98: {
            HatIdo = input.ReadString();
            break;
          }
          case 106: {
            Iktatoszam = input.ReadString();
            break;
          }
          case 114: {
            Szoveg = input.ReadString();
            break;
          }
          case 120: {
            HasDoc = input.ReadBool();
            break;
          }
          case 128: {
            ValaszId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ugyintezo : pb::IMessage<Ugyintezo> {
    private static readonly pb::MessageParser<Ugyintezo> _parser = new pb::MessageParser<Ugyintezo>(() => new Ugyintezo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ugyintezo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ugyintezo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ugyintezo(Ugyintezo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ugyintezo Clone() {
      return new Ugyintezo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ugyintezo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ugyintezo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ugyintezo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Partner : pb::IMessage<Partner> {
    private static readonly pb::MessageParser<Partner> _parser = new pb::MessageParser<Partner>(() => new Partner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Partner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner(Partner other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      ugyintezok_ = other.ugyintezok_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partner Clone() {
      return new Partner(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ugyintezok" field.</summary>
    public const int UgyintezokFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Iktato.PartnerUgyintezo> _repeated_ugyintezok_codec
        = pb::FieldCodec.ForMessage(26, global::Iktato.PartnerUgyintezo.Parser);
    private readonly pbc::RepeatedField<global::Iktato.PartnerUgyintezo> ugyintezok_ = new pbc::RepeatedField<global::Iktato.PartnerUgyintezo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iktato.PartnerUgyintezo> Ugyintezok {
      get { return ugyintezok_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Partner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Partner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!ugyintezok_.Equals(other.ugyintezok_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ugyintezok_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      ugyintezok_.WriteTo(output, _repeated_ugyintezok_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += ugyintezok_.CalculateSize(_repeated_ugyintezok_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Partner other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      ugyintezok_.Add(other.ugyintezok_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ugyintezok_.AddEntriesFrom(input, _repeated_ugyintezok_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartnerUgyintezo : pb::IMessage<PartnerUgyintezo> {
    private static readonly pb::MessageParser<PartnerUgyintezo> _parser = new pb::MessageParser<PartnerUgyintezo>(() => new PartnerUgyintezo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerUgyintezo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerUgyintezo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerUgyintezo(PartnerUgyintezo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerUgyintezo Clone() {
      return new PartnerUgyintezo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerUgyintezo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerUgyintezo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerUgyintezo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Telephely : pb::IMessage<Telephely> {
    private static readonly pb::MessageParser<Telephely> _parser = new pb::MessageParser<Telephely>(() => new Telephely());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Telephely> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telephely() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telephely(Telephely other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telephely Clone() {
      return new Telephely(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Telephely);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Telephely other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Telephely other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Csoport : pb::IMessage<Csoport> {
    private static readonly pb::MessageParser<Csoport> _parser = new pb::MessageParser<Csoport>(() => new Csoport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Csoport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Csoport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Csoport(Csoport other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      shortname_ = other.shortname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Csoport Clone() {
      return new Csoport(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortname" field.</summary>
    public const int ShortnameFieldNumber = 3;
    private string shortname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shortname {
      get { return shortname_; }
      set {
        shortname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Csoport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Csoport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Shortname != other.Shortname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Shortname.Length != 0) hash ^= Shortname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Shortname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Shortname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Shortname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shortname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Csoport other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Shortname.Length != 0) {
        Shortname = other.Shortname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Shortname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Jelleg : pb::IMessage<Jelleg> {
    private static readonly pb::MessageParser<Jelleg> _parser = new pb::MessageParser<Jelleg>(() => new Jelleg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Jelleg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jelleg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jelleg(Jelleg other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jelleg Clone() {
      return new Jelleg(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Jelleg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Jelleg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Jelleg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginMessage : pb::IMessage<LoginMessage> {
    private static readonly pb::MessageParser<LoginMessage> _parser = new pb::MessageParser<LoginMessage>(() => new LoginMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMessage(LoginMessage other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginMessage Clone() {
      return new LoginMessage(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginMessage other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Privilege : pb::IMessage<Privilege> {
    private static readonly pb::MessageParser<Privilege> _parser = new pb::MessageParser<Privilege>(() => new Privilege());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Privilege> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Privilege() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Privilege(Privilege other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Privilege Clone() {
      return new Privilege(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Privilege);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Privilege other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Privilege other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Answer : pb::IMessage<Answer> {
    private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Answer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer(Answer other) : this() {
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer Clone() {
      return new Answer(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Answer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Answer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Answer other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      username_ = other.username_;
      fullname_ = other.fullname_;
      password_ = other.password_;
      privilege_ = other.privilege_ != null ? other.privilege_.Clone() : null;
      authToken_ = other.authToken_ != null ? other.authToken_.Clone() : null;
      telephelyek_ = other.telephelyek_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullname" field.</summary>
    public const int FullnameFieldNumber = 3;
    private string fullname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullname {
      get { return fullname_; }
      set {
        fullname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privilege" field.</summary>
    public const int PrivilegeFieldNumber = 5;
    private global::Iktato.Privilege privilege_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.Privilege Privilege {
      get { return privilege_; }
      set {
        privilege_ = value;
      }
    }

    /// <summary>Field number for the "AuthToken" field.</summary>
    public const int AuthTokenFieldNumber = 6;
    private global::Iktato.AuthToken authToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iktato.AuthToken AuthToken {
      get { return authToken_; }
      set {
        authToken_ = value;
      }
    }

    /// <summary>Field number for the "Telephelyek" field.</summary>
    public const int TelephelyekFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Iktato.Telephely> _repeated_telephelyek_codec
        = pb::FieldCodec.ForMessage(58, global::Iktato.Telephely.Parser);
    private readonly pbc::RepeatedField<global::Iktato.Telephely> telephelyek_ = new pbc::RepeatedField<global::Iktato.Telephely>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iktato.Telephely> Telephelyek {
      get { return telephelyek_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Username != other.Username) return false;
      if (Fullname != other.Fullname) return false;
      if (Password != other.Password) return false;
      if (!object.Equals(Privilege, other.Privilege)) return false;
      if (!object.Equals(AuthToken, other.AuthToken)) return false;
      if(!telephelyek_.Equals(other.telephelyek_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (privilege_ != null) hash ^= Privilege.GetHashCode();
      if (authToken_ != null) hash ^= AuthToken.GetHashCode();
      hash ^= telephelyek_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Fullname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fullname);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (privilege_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Privilege);
      }
      if (authToken_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AuthToken);
      }
      telephelyek_.WriteTo(output, _repeated_telephelyek_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Fullname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (privilege_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Privilege);
      }
      if (authToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthToken);
      }
      size += telephelyek_.CalculateSize(_repeated_telephelyek_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Fullname.Length != 0) {
        Fullname = other.Fullname;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.privilege_ != null) {
        if (privilege_ == null) {
          Privilege = new global::Iktato.Privilege();
        }
        Privilege.MergeFrom(other.Privilege);
      }
      if (other.authToken_ != null) {
        if (authToken_ == null) {
          AuthToken = new global::Iktato.AuthToken();
        }
        AuthToken.MergeFrom(other.AuthToken);
      }
      telephelyek_.Add(other.telephelyek_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Fullname = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            if (privilege_ == null) {
              Privilege = new global::Iktato.Privilege();
            }
            input.ReadMessage(Privilege);
            break;
          }
          case 50: {
            if (authToken_ == null) {
              AuthToken = new global::Iktato.AuthToken();
            }
            input.ReadMessage(AuthToken);
            break;
          }
          case 58: {
            telephelyek_.AddEntriesFrom(input, _repeated_telephelyek_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthToken : pb::IMessage<AuthToken> {
    private static readonly pb::MessageParser<AuthToken> _parser = new pb::MessageParser<AuthToken>(() => new AuthToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthToken(AuthToken other) : this() {
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthToken Clone() {
      return new AuthToken(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthToken other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteMessage : pb::IMessage<DeleteMessage> {
    private static readonly pb::MessageParser<DeleteMessage> _parser = new pb::MessageParser<DeleteMessage>(() => new DeleteMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iktato.IktatoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage(DeleteMessage other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage Clone() {
      return new DeleteMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
